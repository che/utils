#!/bin/sh

CRYPT_DEV_DIR="${CRYPT_DEV_DIR:=$(cd "$(dirname "$0")" && pwd -P)}/"
CRYPT_DEV_LIB_DIR="${CRYPT_DEV_DIR}crypt_dev/"

CRYPT_DEV_ACTION_DEFAULT="mount"
CRYPT_DEV_ACTION="${CRYPT_DEV_ACTION:=$1}"
CRYPT_DEV_ACTION="${CRYPT_DEV_ACTION:=$CRYPT_DEV_ACTION_DEFAULT}"
CRYPT_DEV_DEFAULT="sdb2"
CRYPT_DEV="${CRYPT_DEV:=$2}"
CRYPT_DEV="${CRYPT_DEV:=$CRYPT_DEV_DEFAULT}"

CRYPT_DEV_NAME="crypt_dev_${CRYPT_DEV}"
CRYPT_DEV_NAME_IN="${CRYPT_DEV_NAME}_in"
CRYPT_DEV_SYSTEM="/dev/${CRYPT_DEV}"
CRYPT_DEV_MOUNT_DIR="/mnt/${CRYPT_DEV_NAME}"
CRYPT_DEV_MAPPER="/dev/mapper/${CRYPT_DEV_NAME}"
CRYPT_DEV_MAPPER_IN="/dev/mapper/${CRYPT_DEV_NAME_IN}"
CRYPT_DEV_EXIT_STATUS=
CRYPT_DEV_BIN_FILE=""
CRYPT_DEV_OS=""


########    Main


# System utilities: echo, rm, mkdir, exit, mount, umount, uname, kill, lsof


# Print error message and exit
crypt_dev_error_exit()
{
    echo ""
    crypt_dev_error "$1" "$2"
    echo ""

    exit 1
}

# Print error message
crypt_dev_error()
{
    echo "ERROR: ${1}"
    [ ! -z "$2" ] && echo "$2"
}

# Print warning message
crypt_dev_warning()
{
    echo "WARNING: ${1}"
    [ ! -z "$2" ] && echo "$2"
}

# Print message
crypt_dev_message()
{
    echo "$1"
    [ ! -z "$2" ] && echo "$2"
}

# Action check
crypt_dev_action_check()
{
    case "$CRYPT_DEV_ACTION" in
        create | mount | umount )
        ;;
        * )
            crypt_dev_error_exit "Action '${CRYPT_DEV_ACTION}' is not supported"
        ;;
    esac
}

# Device check
crypt_dev_device_check()
{
    if [ ! -e "$CRYPT_DEV_SYSTEM" ]
    then
        crypt_dev_error_exit "Device '${CRYPT_DEV_SYSTEM}' does not exist"
    fi
}

# Define current OS bin file
crypt_dev_define_os_bin()
{
    case $(uname -s) in
        Linux )
            CRYPT_DEV_OS="linux"
            CRYPT_DEV_BIN_FILE="$(which cryptsetup)"
        ;;
        NetBSD )
            CRYPT_DEV_OS="netbsd"
            CRYPT_DEV_BIN_FILE="$(which cgd)"
        ;;
        FreeBSD )
            CRYPT_DEV_OS="freebsd"
            CRYPT_DEV_BIN_FILE="$(which geli)"
        ;;
        OpenBSD )
            CRYPT_DEV_OS="openbsd"
            CRYPT_DEV_BIN_FILE="$(which bioctl)"
        ;;
        Darwin )
            CRYPT_DEV_OS="macosx"
            CRYPT_DEV_BIN_FILE="$(which hdiutil)"
        ;;
        QNX )
            CRYPT_DEV_OS="qnx"
            CRYPT_DEV_BIN_FILE="$(which fscrypto)"
        ;;
        * )
            crypt_dev_error_exit "Current OS is not supported"
        ;;
    esac
}

# Execute
crypt_dev_exec()
{
    crypt_dev_action_check
    crypt_dev_device_check
    crypt_dev_define_os_bin

    ${CRYPT_DEV_OS}_${CRYPT_DEV_ACTION}
}




################        GNU/Linux -- LUKS (cryptsetup)


# Check installation cryptsetup
linux_cryptsetup_check()
{
    if [ -z "$CRYPT_DEV_BIN_FILE" ]
    then
        crypt_dev_error_exit "Please, install 'cryptsetup' and/or execute as root"
    fi
}

# Check LUKS device
linux_luks_is()
{
    "$CRYPT_DEV_BIN_FILE" isLuks "$1" 2> /dev/null
    echo "$?"
}

# Open LUKS device
linux_luks_open()
{
    "$CRYPT_DEV_BIN_FILE" luksOpen "$CRYPT_DEV_SYSTEM" "$CRYPT_DEV_NAME"
    CRYPT_DEV_EXIT_STATUS="$?"
    if [ $CRYPT_DEV_EXIT_STATUS -eq 0 ]
    then
        crypt_dev_message "'${CRYPT_DEV_NAME}' has been opened"
    else
        crypt_dev_error_exit "'${CRYPT_DEV_NAME}' has not been opened"
    fi
}

# Open LUKS device in mapper
linux_luks_open_in()
{
    "$CRYPT_DEV_BIN_FILE" luksOpen "$CRYPT_DEV_MAPPER" "$CRYPT_DEV_NAME_IN"
    CRYPT_DEV_EXIT_STATUS="$?"
    if [ $CRYPT_DEV_EXIT_STATUS -eq 0 ]
    then
        crypt_dev_message "'${CRYPT_DEV_NAME_IN}' has been opened"
    else
        crypt_dev_error_exit "'${CRYPT_DEV_NAME_IN}' has not been opened"
    fi
}

# Close LUKS device in mapper
linux_luks_close_in()
{
    if [ -e "$CRYPT_DEV_MAPPER_IN" ]
    then
        "$CRYPT_DEV_BIN_FILE" luksClose "$CRYPT_DEV_MAPPER_IN"
        CRYPT_DEV_EXIT_STATUS="$?"
        if [ $CRYPT_DEV_EXIT_STATUS -eq 0 ]
        then
            crypt_dev_message "'${CRYPT_DEV_MAPPER_IN}' has been closed"

            rm -rf "$CRYPT_DEV_MOUNT_DIR"
            if [ "$CRYPT_DEV_ACTION" = "$CRYPT_DEV_ACTION_DEFAULT" ]
            then
                exit 0
            fi
        else
            crypt_dev_error_exit "'${CRYPT_DEV_MAPPER_IN}' has not been closed"
        fi
    else
        crypt_dev_warning "'${CRYPT_DEV_MAPPER_IN}' does not exists"
    fi
}

# Close LUKS device
linux_luks_close()
{
    if [ -e "$CRYPT_DEV_MAPPER" ]
    then
        "$CRYPT_DEV_BIN_FILE" luksClose "$CRYPT_DEV_MAPPER"
        CRYPT_DEV_EXIT_STATUS="$?"
        if [ $CRYPT_DEV_EXIT_STATUS -eq 0 ]
        then
            crypt_dev_message "'${CRYPT_DEV_MAPPER}' has been closed"

            rm -rf "$CRYPT_DEV_MOUNT_DIR"
            exit 0
        else
            crypt_dev_error_exit "'${CRYPT_DEV_MAPPER}' has not been closed"
        fi
    else
        crypt_dev_warning "'${CRYPT_DEV_MAPPER}' does not exists"
        exit 0
    fi
}


########    GNU/Linux -- LUKS -- Create


# Create LUKS device in mapper
linux_luks_create()
{
    local luks_create_options="--verify-passphrase --type luks --cipher aes-xts-essiv:sha256 --key-size 512 --hash sha512"

    "$CRYPT_DEV_BIN_FILE" luksFormat "$CRYPT_DEV_SYSTEM" $luks_create_options
    CRYPT_DEV_EXIT_STATUS="$?"
    if [ $CRYPT_DEV_EXIT_STATUS -eq 0 ]
    then
        crypt_dev_message "LUKS has been created on '${CRYPT_DEV_NAME}'"
    else
        crypt_dev_error_exit "LUKS has not been created on '${CRYPT_DEV_NAME}'"
    fi
}

# Create device
linux_create()
{
    linux_cryptsetup_check
    linux_luks_create
    linux_luks_open
    linux_luks_close
}


########    GNU/Linux -- LUKS -- Mount


# Mount LUKS device
linux_mapper_mount()
{
    mkdir -p "$CRYPT_DEV_MOUNT_DIR" && mount "$1" "$CRYPT_DEV_MOUNT_DIR"
    CRYPT_DEV_EXIT_STATUS="$?"
    if [ $CRYPT_DEV_EXIT_STATUS -eq 0 ]
    then
        crypt_dev_message "'${CRYPT_DEV_SYSTEM}' has been mounted to '${CRYPT_DEV_MOUNT_DIR}'"
    else
        crypt_dev_error "Something wrong"

        if [ $(linux_luks_is "$CRYPT_DEV_MAPPER_IN") -eq 0 ]
        then
            linux_luks_close_in
        fi
        linux_luks_close
    fi

    exit $CRYPT_DEV_EXIT_STATUS
}

# Mount LUKS device in mapper
linux_luks_mount()
{
    local crypt_dev_mapper="$CRYPT_DEV_MAPPER"

    if [ -e "$CRYPT_DEV_SYSTEM" ]
    then
        if [ ! -e "$CRYPT_DEV_MOUNT_DIR" ]
        then
            linux_luks_open
            if [ $(linux_luks_is "$CRYPT_DEV_MAPPER") -eq 0 ]
            then
                linux_luks_open_in
                crypt_dev_mapper="$CRYPT_DEV_MAPPER_IN"
            fi
            linux_mapper_mount "$crypt_dev_mapper"
        else
            crypt_dev_error_exit "'${CRYPT_DEV_MOUNT_DIR}' already exists"
        fi
    else
        crypt_dev_error_exit "'${CRYPT_DEV_SYSTEM}' does not exist"
    fi
}

# Mount device
linux_mount()
{
    linux_cryptsetup_check
    linux_luks_mount
}


########    GNU/Linux -- LUKS -- Umount


# Force umount LUKS device
linux_luks_mapper_umount()
{
    local crypt_dev_mapper_pids=""

    for i in $(lsof -Fp "$CRYPT_DEV_MOUNT_DIR" 2>/dev/null)
    do
        crypt_dev_mapper_pids="$crypt_dev_mapper_pids ${i/p/}"
    done

    if [ -z "$crypt_dev_mapper_pids" ]
    then
        umount -l "$CRYPT_DEV_MOUNT_DIR"

        crypt_dev_warning "'${CRYPT_DEV_MOUNT_DIR}' has been unmounted lazily"
    else
        crypt_dev_warning "Killing proccesses${crypt_dev_mapper_pids} for '$CRYPT_DEV_MOUNT_DIR'"

        kill -9 $crypt_dev_mapper_pids
        linux_luks_umount
    fi
}

# Umount LUKS device in mapper
linux_luks_umount()
{
    if [ -e "$CRYPT_DEV_MOUNT_DIR" ]
    then
        umount "$CRYPT_DEV_MOUNT_DIR"
        CURRENT_EXIT_STATUS="$?"
        if [ $CURRENT_EXIT_STATUS -eq 0 ]
        then
            crypt_dev_message "'${CRYPT_DEV_MOUNT_DIR}' has been unmounted"

            rm -rf "$CRYPT_DEV_MOUNT_DIR"
        else
            crypt_dev_error "'${CRYPT_DEV_MOUNT_DIR}' has not been unmounted correctly"

            linux_luks_mapper_umount
        fi
    else
        crypt_dev_warning "'${CRYPT_DEV_MOUNT_DIR}' does not exists"
    fi
}

# Umount device
linux_umount()
{
    linux_cryptsetup_check
    linux_luks_umount
    if [ $(linux_luks_is "$CRYPT_DEV_MAPPER_IN") -lt 2 ]
    then
        linux_luks_close_in
    fi
    linux_luks_close
}




################        NetBSD -- CGD (cgd)


# Check installation cgd
netbsd_cgd_check()
{
    if [ -z "$CRYPT_DEV_BIN_FILE" ]
    then
        crypt_dev_error_exit "Please, install 'cgd' and/or execute as root"
    fi
}


########    NetBSD -- CGD -- Create


# Create device
netbsd_create()
{
    netbsd_cgd_check
}


########    NetBSD -- CGD -- Mount


# Mount device
netbsd_mount()
{
    netbsd_cgd_check
}


########    NetBSD -- CGD -- Umount


# Umount device
netbsd_umount()
{
    netbsd_cgd_check
}




################        FreeBSD -- GELI (geli)


# Check installation geli
freebsd_geli_check()
{
    if [ -z "$CRYPT_DEV_BIN_FILE" ]
    then
        crypt_dev_error_exit "Please, install 'geli' and/or execute as root"
    fi
}


########    FreeBSD -- GELI -- Create


# Create device
freebsd_create()
{
    freebsd_geli_check
}


########    FreeBSD -- GELI -- Mount


# Mount device
freebsd_mount()
{
    freebsd_geli_check
}


########    FreeBSD -- GELI -- Umount


# Umount device
freebsd_umount()
{
    freebsd_geli_check
}




################        OpenBSD -- SVND (bioctl)


# Check installation softraid and bioctl
openbsd_bioctl_check()
{
    if [ -z "$CRYPT_DEV_BIN_FILE" ]
    then
        crypt_dev_error_exit "Please, install 'softraid/bioctl' and/or execute as root"
    fi
}


########    OpenBSD -- SVND -- Create


# Create device
openbsd_create()
{
    openbsd_bioctl_check
}


########    OpenBSD -- SVND -- Mount


# Mount device
openbsd_mount()
{
    openbsd_bioctl_check
}


########    OpenBSD -- SVND -- Umount


# Umount device
openbsd_umount()
{
    openbsd_bioctl_check
}




################        Mac OS X -- FileVault2 (hdiutil)


# Check installation hdiutil
macosx_hdiutil_check()
{
    if [ -z "$CRYPT_DEV_BIN_FILE" ]
    then
        crypt_dev_error_exit "Please, install 'hdiutil' and/or execute as root"
    fi
}


########    Mac OS X -- FileVault2 -- Create


# Create device
macosx_create()
{
    macosx_hdiutil_check
}


########    Mac OS X -- FileVault2 -- Mount


# Mount device
macosx_mount()
{
    macosx_hdiutil_check
}


########    Mac OS X -- FileVault2 -- Umount


# Umount device
macosx_umount()
{
    macosx_hdiutil_check
}




################        QNX -- FSCrypto (fscrypto)


# Check installation fscrypto
qnx_fscrypto_check()
{
    if [ -z "$CRYPT_DEV_BIN_FILE" ]
    then
        crypt_dev_error_exit "Please, install 'fscrypto' and/or execute as root"
    fi
}


########    QNX -- FSCrypto -- Create


# Create device
qnx_create()
{
    qnx_fscrypto_check
}


########    QNX -- FSCrypto -- Mount


# Mount device
qnx_mount()
{
    qnx_fscrypto_check
}


########    QNX -- FSCrypto -- Umount


# Umount device
qnx_umount()
{
    qnx_fscrypto_check
}



# Execution
crypt_dev_exec
