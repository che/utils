#!/bin/sh
#
# Code is available online at https://github.com/crypt-dev/
# See LICENSE for licensing information, and README for details.
#
# Author: Pavel Chebotarev
#
# Copyright (C) 2016 Pavel Chebotarev, Magenete Systems OÃœ.
#


CRYPT_DEV_ACTION_DEFAULT="mount"
CRYPT_DEV_ACTION="${CRYPT_DEV_ACTION:=$1}"
CRYPT_DEV_ACTION="${CRYPT_DEV_ACTION:=$CRYPT_DEV_ACTION_DEFAULT}"

CRYPT_DEV_DEFAULT="sdb2"
CRYPT_DEV="${CRYPT_DEV:=$2}"
CRYPT_DEV="${CRYPT_DEV:=$CRYPT_DEV_DEFAULT}"

CRYPT_DEV_FS_DEFAULT="ext4"
CRYPT_DEV_FS="${CRYPT_DEV_FS:=$3}"
CRYPT_DEV_FS="${CRYPT_DEV_FS:=$CRYPT_DEV_FS_DEFAULT}"

CRYPT_DEV_LEVEL_DEFAULT=1
CRYPT_DEV_LEVEL="${CRYPT_DEV_LEVEL:=$4}"
CRYPT_DEV_LEVEL="${CRYPT_DEV_LEVEL:=$CRYPT_DEV_LEVEL_DEFAULT}"
CRYPT_DEV_LEVEL_MIN=$CRYPT_DEV_LEVEL_DEFAULT
CRYPT_DEV_LEVEL_MAX=2

CRYPT_DEV_LABEL_DEFAULT="crypt-dev"
CRYPT_DEV_LABEL="${CRYPT_DEV_LABEL:=$5}"
CRYPT_DEV_LABEL="${CRYPT_DEV_LABEL:=$CRYPT_DEV_LABEL_DEFAULT}"
CRYPT_DEV_LABEL_SIZE=16
CRYPT_DEV_LABEL_FAT_SIZE=11
CRYPT_DEV_LABEL_CHARACTERS_ARRAY="_ - 1 2 3 4 5 6 7 8 9 0 a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z"

CRYPT_DEV_KEY_FILE_DEFAULT=""
CRYPT_DEV_KEY_FILE="${CRYPT_DEV_KEY_FILE:=$6}"
CRYPT_DEV_KEY_FILE="${CRYPT_DEV_KEY_FILE:=$CRYPT_DEV_KEY_FILE_DEFAULT}"

CRYPT_DEV_NAME="crypt_dev_${CRYPT_DEV}"
CRYPT_DEV_NAME_IN="${CRYPT_DEV_NAME}_in"
CRYPT_DEV_SYSTEM="/dev/${CRYPT_DEV}"
CRYPT_DEV_MOUNT_DIR="/mnt/${CRYPT_DEV_NAME}"
CRYPT_DEV_MAPPER="/dev/mapper/${CRYPT_DEV_NAME}"
CRYPT_DEV_MAPPER_IN="/dev/mapper/${CRYPT_DEV_NAME_IN}"

CRYPT_DEV_EXIT_STATUS=0
CRYPT_DEV_BIN_FILE=""
CRYPT_DEV_OPTIONS=""
CRYPT_DEV_OS=""


########    Main


# System utilities: echo, rm, mkdir, exit, mount, umount, uname, kill, lsof, which


# Print error message and exit
crypt_dev_error_exit()
{
    echo ""
    crypt_dev_error "$1" "$2"
    echo ""

    exit 1
}

# Print error message
crypt_dev_error()
{
    echo "ERROR: ${1}"
    [ ! -z "$2" ] && echo "$2"
}

# Print warning message
crypt_dev_warning()
{
    echo "WARNING: ${1}"
    [ ! -z "$2" ] && echo "$2"
}

# Print message
crypt_dev_message()
{
    echo "$1"
    [ ! -z "$2" ] && echo "$2"
}

# Action check
crypt_dev_action_check()
{
    case "$CRYPT_DEV_ACTION" in
        create | mount | umount )
        ;;
        * )
            crypt_dev_error_exit "Action '${CRYPT_DEV_ACTION}' is not supported"
        ;;
    esac
}

# Device check
crypt_dev_device_check()
{
    if [ ! -e "$CRYPT_DEV_SYSTEM" ]
    then
        crypt_dev_error_exit "Device '${CRYPT_DEV_SYSTEM}' does not exist"
    fi
}

# Device FS check
crypt_dev_device_fs_check()
{
    case "$CRYPT_DEV_FS" in
        fat32 | vfat | ext4 | ntfs )
        ;;
        * )
            crypt_dev_error_exit "Device FS '${CRYPT_DEV_FS}' is not supported"
        ;;
    esac
}

# Creation level check
crypt_dev_level_check()
{
    if [ $CRYPT_DEV_LEVEL -lt $CRYPT_DEV_LEVEL_MIN -o $CRYPT_DEV_LEVEL -gt $CRYPT_DEV_LEVEL_MAX ]
    then
        crypt_dev_error_exit "Level '${CRYPT_DEV_LEVEL}' but must be ${CRYPT_DEV_LEVEL_MIN} or ${CRYPT_DEV_LEVEL_MAX}"
    fi
}

# Device label size check
crypt_dev_label_size_check()
{
    local device_label_size=$CRYPT_DEV_LABEL_SIZE

    if [ "$CRYPT_DEV_FS" = "fat32" -o "$CRYPT_DEV_FS" = "vfat" ]
    then
        device_label_size=$CRYPT_DEV_LABEL_FAT_SIZE
    fi

    if [ ${#CRYPT_DEV_LABEL} -gt $device_label_size ]
    then
        crypt_dev_error_exit "Device label size '${CRYPT_DEV_LABEL}' must be less ${device_label_size}"
    fi
}

# Device label characters check
crypt_dev_label_characters_check()
{
    local label_size=${#CRYPT_DEV_LABEL}
    local label_count=0
    local count=0
    local device_label="$CRYPT_DEV_LABEL"

    while [ $label_size -gt $count ]
    do
        count=$((count + 1))

        for char in $CRYPT_DEV_LABEL_CHARACTERS_ARRAY
        do
            if [ ! "${device_label#${char}}" = "$device_label" ]
            then
                device_label="${device_label#$char}"
                label_count=$((label_count + 1))
            fi
        done
    done

    if [ ! $label_size -eq $label_count ]
    then
        crypt_dev_error_exit "Device label '${CRYPT_DEV_LABEL}' must be only from: _,-,0-9,a-z,A-Z"
    fi
}

# Current OS bin file define
crypt_dev_os_bin_define()
{
    case "$(uname -s)" in
        Linux )
            CRYPT_DEV_OS="linux"
            CRYPT_DEV_BIN_FILE="$(which cryptsetup)"
        ;;
        NetBSD )
            CRYPT_DEV_OS="netbsd"
            CRYPT_DEV_BIN_FILE="$(which cgd)"
        ;;
        FreeBSD )
            CRYPT_DEV_OS="freebsd"
            CRYPT_DEV_BIN_FILE="$(which geli)"
        ;;
        OpenBSD )
            CRYPT_DEV_OS="openbsd"
            CRYPT_DEV_BIN_FILE="$(which bioctl)"
        ;;
        DragonflyBSD )
            CRYPT_DEV_OS="dragonflybsd"
            CRYPT_DEV_BIN_FILE="$(which cryptsetup)"
        ;;
        Darwin )
            CRYPT_DEV_OS="macosx"
            CRYPT_DEV_BIN_FILE="$(which hdiutil)"
        ;;
        QNX )
            CRYPT_DEV_OS="qnx"
            CRYPT_DEV_BIN_FILE="$(which fscrypto)"
        ;;
        * )
            crypt_dev_error_exit "Current OS is not supported"
        ;;
    esac
}

# Option define
crypt_dev_optin_define()
{
    if [ ! -z "$CRYPT_DEV_KEY_FILE" ]
    then
        if [ ! -e "$CRYPT_DEV_KEY_FILE" ]
        then
            crypt_dev_error_exit "File '${CRYPT_DEV_KEY_FILE}' does not exist"
        fi
        if [ ! -f "$CRYPT_DEV_KEY_FILE" ]
        then
            crypt_dev_error_exit "'${CRYPT_DEV_KEY_FILE}' is not file"
        fi
    fi
}

# Execute
crypt_dev_exec()
{
    crypt_dev_action_check
    crypt_dev_device_check
    crypt_dev_device_fs_check
    crypt_dev_level_check
    crypt_dev_label_size_check
    crypt_dev_label_characters_check
    crypt_dev_os_bin_define
    crypt_dev_optin_define

    ${CRYPT_DEV_OS}_${CRYPT_DEV_ACTION}
}




################        GNU/Linux -- LUKS (cryptsetup)


# cryptsetup installation check
linux_cryptsetup_check()
{
    if [ -z "$CRYPT_DEV_BIN_FILE" ]
    then
        crypt_dev_error_exit "Please, install 'cryptsetup' and/or execute as root"
    fi
}

# LUKS options define
linux_luks_options_define()
{
    if [ -z "$CRYPT_DEV_KEY_FILE" ]
    then
        CRYPT_DEV_OPTIONS="--timeout 300"
    else
        CRYPT_DEV_OPTIONS="--key-file ${CRYPT_DEV_KEY_FILE}"
    fi
}

# LUKS device check
linux_luks_is()
{
    $CRYPT_DEV_BIN_FILE isLuks $1 2> /dev/null
    echo "$?"
}

# LUKS device open
linux_luks_open()
{
    $CRYPT_DEV_BIN_FILE open $CRYPT_DEV_OPTIONS $CRYPT_DEV_SYSTEM $CRYPT_DEV_NAME
    CRYPT_DEV_EXIT_STATUS=$?
    if [ $CRYPT_DEV_EXIT_STATUS -eq 0 ]
    then
        crypt_dev_message "Device '${CRYPT_DEV_NAME}' has been opened"
    else
        crypt_dev_error_exit "Device '${CRYPT_DEV_NAME}' has not been opened"
    fi
}

# LUKS device in mapper open
linux_luks_open_in()
{
    $CRYPT_DEV_BIN_FILE open $CRYPT_DEV_OPTIONS $CRYPT_DEV_MAPPER $CRYPT_DEV_NAME_IN
    CRYPT_DEV_EXIT_STATUS=$?
    if [ $CRYPT_DEV_EXIT_STATUS -eq 0 ]
    then
        crypt_dev_message "Device '${CRYPT_DEV_NAME_IN}' has been opened"
    else
        crypt_dev_error_exit "Device '${CRYPT_DEV_NAME_IN}' has not been opened"
    fi
}

# LUKS device in mapper close
linux_luks_close_in()
{
    if [ -e "$CRYPT_DEV_MAPPER_IN" ]
    then
        $CRYPT_DEV_BIN_FILE close $CRYPT_DEV_MAPPER_IN
        CRYPT_DEV_EXIT_STATUS=$?
        if [ $CRYPT_DEV_EXIT_STATUS -eq 0 ]
        then
            crypt_dev_message "Device '${CRYPT_DEV_MAPPER_IN}' has been closed"

            rm -rf "$CRYPT_DEV_MOUNT_DIR"
            if [ "$CRYPT_DEV_ACTION" = "$CRYPT_DEV_ACTION_DEFAULT" ]
            then
                exit 0
            fi
        else
            crypt_dev_error_exit "Device '${CRYPT_DEV_MAPPER_IN}' has not been closed"
        fi
    else
        crypt_dev_warning "Device '${CRYPT_DEV_MAPPER_IN}' does not exist"
    fi
}

# LUKS device close
linux_luks_close()
{
    if [ -e "$CRYPT_DEV_MAPPER" ]
    then
        $CRYPT_DEV_BIN_FILE close $CRYPT_DEV_MAPPER
        CRYPT_DEV_EXIT_STATUS=$?
        if [ $CRYPT_DEV_EXIT_STATUS -eq 0 ]
        then
            crypt_dev_message "Device '${CRYPT_DEV_MAPPER}' has been closed"

            rm -rf "$CRYPT_DEV_MOUNT_DIR"
            exit 0
        else
            crypt_dev_error_exit "Device '${CRYPT_DEV_MAPPER}' has not been closed"
        fi
    else
        crypt_dev_warning "Device '${CRYPT_DEV_MAPPER}' does not exist"
        exit 0
    fi
}


########    GNU/Linux -- LUKS -- Create


# LUKS device in mapper create
linux_luks_create()
{
    local luks_create_options="--type luks --cipher aes-xts-essiv:sha256 --key-size 512 --hash sha512"

    if [ -z "$CRYPT_DEV_KEY_FILE" ]
    then
        luks_create_options="--verify-passphrase ${luks_create_options}"
    fi

    $CRYPT_DEV_BIN_FILE luksFormat $1 $CRYPT_DEV_OPTIONS $luks_create_options
    CRYPT_DEV_EXIT_STATUS=$?
    if [ $CRYPT_DEV_EXIT_STATUS -eq 0 ]
    then
        crypt_dev_message "Device '${1}' has been encrypted"
    else
        crypt_dev_error_exit "Device '${1}' has not been encrypted"
    fi
}

# File system on device in mapper create
linux_luks_create_fs()
{
    local mkfs_create_options=" -L ${CRYPT_DEV_LABEL}"
    local mkfs_type="$CRYPT_DEV_FS"

    if [ "$CRYPT_DEV_FS" = "fat32" -o "$CRYPT_DEV_FS" = "vfat" ]
    then
        mkfs_create_options=" -F 32 -n ${CRYPT_DEV_LABEL}"
    fi
    if [ "$CRYPT_DEV_FS" = "fat32" ]
    then
        mkfs_type="fat"
    fi

    mkfs.$mkfs_type $mkfs_create_options $1
    CRYPT_DEV_EXIT_STATUS=$?
    if [ $CRYPT_DEV_EXIT_STATUS -eq 0 ]
    then
        crypt_dev_message "FS '${CRYPT_DEV_FS}' has been created on '${1}'"
    else
        crypt_dev_error_exit "FS '${CRYPT_DEV_FS}' has not been created on '${1}'"
    fi

    # Sync
    sleep 4
}

# Device create
linux_create()
{
    linux_cryptsetup_check
    linux_luks_options_define
    linux_luks_create "$CRYPT_DEV_SYSTEM"
    linux_luks_open
    if [ $CRYPT_DEV_LEVEL -eq $CRYPT_DEV_LEVEL_MIN ]
    then
        linux_luks_create_fs "$CRYPT_DEV_MAPPER"
    else
        linux_luks_create "$CRYPT_DEV_MAPPER"
        linux_luks_open_in
        linux_luks_create_fs "$CRYPT_DEV_MAPPER_IN"
        linux_luks_close_in
    fi
    linux_luks_close
}


########    GNU/Linux -- LUKS -- Mount


# LUKS device mount
linux_mapper_mount()
{
    mkdir -p "$CRYPT_DEV_MOUNT_DIR" && mount $1 "$CRYPT_DEV_MOUNT_DIR"
    CRYPT_DEV_EXIT_STATUS=$?
    if [ $CRYPT_DEV_EXIT_STATUS -eq 0 ]
    then
        crypt_dev_message "Device '${CRYPT_DEV_SYSTEM}' has been mounted to directory '${CRYPT_DEV_MOUNT_DIR}'"
    else
        crypt_dev_error "Something wrong"

        if [ $(linux_luks_is "$CRYPT_DEV_MAPPER_IN") -eq 0 ]
        then
            linux_luks_close_in
        fi
        linux_luks_close
    fi

    exit $CRYPT_DEV_EXIT_STATUS
}

# LUKS device in mapper mount
linux_luks_mount()
{
    local crypt_dev_mapper="$CRYPT_DEV_MAPPER"

    if [ -e "$CRYPT_DEV_SYSTEM" ]
    then
        if [ ! -e "$CRYPT_DEV_MOUNT_DIR" ]
        then
            linux_luks_open
            if [ $(linux_luks_is "$CRYPT_DEV_MAPPER") -eq 0 ]
            then
                linux_luks_open_in
                crypt_dev_mapper="$CRYPT_DEV_MAPPER_IN"
            fi
            linux_mapper_mount "$crypt_dev_mapper"
        else
            crypt_dev_error_exit "Directory '${CRYPT_DEV_MOUNT_DIR}' already exists"
        fi
    else
        crypt_dev_error_exit "Device '${CRYPT_DEV_SYSTEM}' does not exist"
    fi
}

# Device mount
linux_mount()
{
    linux_cryptsetup_check
    linux_luks_options_define
    linux_luks_mount
}


########    GNU/Linux -- LUKS -- Umount


# LUKS device umount (force)
linux_luks_mapper_umount()
{
    local crypt_dev_mapper_pids=""

    for i in $(lsof -Fp "$CRYPT_DEV_MOUNT_DIR" 2>/dev/null)
    do
        crypt_dev_mapper_pids="$crypt_dev_mapper_pids ${i/p/}"
    done

    if [ -z "$crypt_dev_mapper_pids" ]
    then
        umount -l "$CRYPT_DEV_MOUNT_DIR"

        crypt_dev_warning "Directory '${CRYPT_DEV_MOUNT_DIR}' has been unmounted lazily"
    else
        crypt_dev_warning "Killing proccesses${crypt_dev_mapper_pids} for '$CRYPT_DEV_MOUNT_DIR'"

        kill -9 $crypt_dev_mapper_pids
        linux_luks_umount
    fi
}

# LUKS device in mapper umount
linux_luks_umount()
{
    if [ -e "$CRYPT_DEV_MOUNT_DIR" ]
    then
        umount "$CRYPT_DEV_MOUNT_DIR"
        CURRENT_EXIT_STATUS=$?
        if [ $CURRENT_EXIT_STATUS -eq 0 ]
        then
            crypt_dev_message "Device '${CRYPT_DEV_SYSTEM}' has been unmounted from directory '${CRYPT_DEV_MOUNT_DIR}'"

            rm -rf "$CRYPT_DEV_MOUNT_DIR"
        else
            crypt_dev_error "Device '${CRYPT_DEV_SYSTEM}' has not been unmounted correctly from directory '${CRYPT_DEV_MOUNT_DIR}'"

            linux_luks_mapper_umount
        fi
    else
        crypt_dev_warning "Directory '${CRYPT_DEV_MOUNT_DIR}' does not exist"
    fi
}

# Device umount
linux_umount()
{
    linux_cryptsetup_check
    linux_luks_umount
    if [ $(linux_luks_is "$CRYPT_DEV_MAPPER_IN") -lt 2 ]
    then
        linux_luks_close_in
    fi
    linux_luks_close
}




################        NetBSD -- CGD (cgd)


# cgd installation check
netbsd_cgd_check()
{
    if [ -z "$CRYPT_DEV_BIN_FILE" ]
    then
        crypt_dev_error_exit "Please, install 'cgd' and/or execute as root"
    fi
}


########    NetBSD -- CGD -- Create


# Device create
netbsd_create()
{
    netbsd_cgd_check
}


########    NetBSD -- CGD -- Mount


# Device mount
netbsd_mount()
{
    netbsd_cgd_check
}


########    NetBSD -- CGD -- Umount


# Device umount
netbsd_umount()
{
    netbsd_cgd_check
}




################        FreeBSD -- GELI (geli)


# geli installation check
freebsd_geli_check()
{
    if [ -z "$CRYPT_DEV_BIN_FILE" ]
    then
        crypt_dev_error_exit "Please, install 'geli' and/or execute as root"
    fi
}


########    FreeBSD -- GELI -- Create


# Device create
freebsd_create()
{
    freebsd_geli_check
}


########    FreeBSD -- GELI -- Mount


# Device mount
freebsd_mount()
{
    freebsd_geli_check
}


########    FreeBSD -- GELI -- Umount


# Device umount
freebsd_umount()
{
    freebsd_geli_check
}




################        OpenBSD -- SVND (bioctl)


# softraid and bioctl installation check
openbsd_bioctl_check()
{
    if [ -z "$CRYPT_DEV_BIN_FILE" ]
    then
        crypt_dev_error_exit "Please, install 'softraid/bioctl' and/or execute as root"
    fi
}


########    OpenBSD -- SVND -- Create


# Device create
openbsd_create()
{
    openbsd_bioctl_check
}


########    OpenBSD -- SVND -- Mount


# Device mount
openbsd_mount()
{
    openbsd_bioctl_check
}


########    OpenBSD -- SVND -- Umount


# Device umount
openbsd_umount()
{
    openbsd_bioctl_check
}




################        DragonflyBSD -- LUKS (cryptsetup)


# cryptsetup installation check
dragonflybsd_cryptsetup_check()
{
    linux_cryptsetup_check
}


########    DragonflyBSD -- LUKS -- Create


# Device create
dragonflybsd_create()
{
    dragonflybsd_cryptsetup_check
}


########    DragonflyBSD -- LUKS -- Mount


# Device mount
dragonflybsd_mount()
{
    dragonflybsd_cryptsetup_check
}


########    DragonflyBSD -- LUKS -- Umount


# Dvice umount
dragonflybsd_umount()
{
    dragonflybsd_cryptsetup_check
}




################        Mac OS X -- FileVault2 (hdiutil)


# hdiutil installation check
macosx_hdiutil_check()
{
    if [ -z "$CRYPT_DEV_BIN_FILE" ]
    then
        crypt_dev_error_exit "Please, install 'hdiutil' and/or execute as root"
    fi
}


########    Mac OS X -- FileVault2 -- Create


# Device create
macosx_create()
{
    macosx_hdiutil_check
}


########    Mac OS X -- FileVault2 -- Mount


# Device mount
macosx_mount()
{
    macosx_hdiutil_check
}


########    Mac OS X -- FileVault2 -- Umount


# Device umount
macosx_umount()
{
    macosx_hdiutil_check
}




################        QNX -- FSCrypto (fscrypto)


# fscrypto installation check
qnx_fscrypto_check()
{
    if [ -z "$CRYPT_DEV_BIN_FILE" ]
    then
        crypt_dev_error_exit "Please, install 'fscrypto' and/or execute as root"
    fi
}


########    QNX -- FSCrypto -- Create


# Device create
qnx_create()
{
    qnx_fscrypto_check
}


########    QNX -- FSCrypto -- Mount


# Device mount
qnx_mount()
{
    qnx_fscrypto_check
}


########    QNX -- FSCrypto -- Umount


# Device umount
qnx_umount()
{
    qnx_fscrypto_check
}



# Execution
crypt_dev_exec
