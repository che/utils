#!/bin/sh

CRYPT_DEV_DIR="${CRYPT_DEV_DIR:=$(cd "$(dirname "$0")" && pwd -P)}/"
CRYPT_DEV_LIB_DIR="${CRYPT_DEV_DIR}crypt_dev/"

CRYPT_DEV_ACTION_DEFAULT="mount"
CRYPT_DEV_ACTION="${CRYPT_DEV_ACTION:=$1}"
CRYPT_DEV_ACTION="${CRYPT_DEV_ACTION:=$CRYPT_DEV_ACTION_DEFAULT}"
CRYPT_DEV_DEFAULT="sdb2"
CRYPT_DEV="${CRYPT_DEV:=$2}"
CRYPT_DEV="${CRYPT_DEV:=$CRYPT_DEV_DEFAULT}"

CRYPT_DEV_NAME="crypt_dev_${CRYPT_DEV}"
CRYPT_DEV_NAME_IN="${CRYPT_DEV_NAME}_in"
CRYPT_DEV_SYSTEM="/dev/${CRYPT_DEV}"
CRYPT_DEV_MOUNT_DIR="/mnt/${CRYPT_DEV_NAME}"
CRYPT_DEV_MAPPER="/dev/mapper/${CRYPT_DEV_NAME}"
CRYPT_DEV_MAPPER_IN="/dev/mapper/${CRYPT_DEV_NAME_IN}"
CRYPT_DEV_EXIT_STATUS=
CRYPT_DEV_BIN_FILE=""
CRYPT_DEV_OS=""

# System utilities: echo, rm, mkdir, exit, mount, umount, uname, kill




########    Main




# Print error message
crypt_dev_error()
{
    echo ""
    echo "ERROR: ${1}"
    [ ! -z "$2" ] && echo "$2"
    echo ""
}

# Print error message and exit
crypt_dev_error_exit()
{
    crypt_dev_error "$1" "$2"

    exit 1
}

# Print warning message
crypt_dev_warning()
{
    echo ""
    echo "WARNING: ${1}"
    [ ! -z "$2" ] && echo "$2"
    echo ""
}

# Print message
crypt_dev_message()
{
    echo ""
    echo "$1"
    [ ! -z "$2" ] && echo "$2"
    echo ""
}

# Action check
crypt_dev_action_check()
{
    case "$CRYPT_DEV_ACTION" in
        mount | umount )
        ;;
        * )
            crypt_dev_error_exit "Action '${CRYPT_DEV_ACTION}' is not supported"
        ;;
    esac
}

# Device check
crypt_dev_device_check()
{
    if [ ! -e "$CRYPT_DEV_SYSTEM" ]
    then
        crypt_dev_error_exit "Device '${CRYPT_DEV_SYSTEM}' does not exist"
    fi
}

# Define current OS bin file
crypt_dev_define_os_bin()
{
    case $(uname -s) in
        Linux )
            CRYPT_DEV_OS="linux"
            CRYPT_DEV_BIN_FILE="$(which cryptsetup)"
        ;;
        NetBSD )
            CRYPT_DEV_OS="netbsd"
            CRYPT_DEV_BIN_FILE="$(which cgd)"
        ;;
        FreeBSD )
            CRYPT_DEV_OS="freebsd"
            CRYPT_DEV_BIN_FILE="$(which geli)"
        ;;
        OpenBSD )
            CRYPT_DEV_OS="openbsd"
            CRYPT_DEV_BIN_FILE="$(which vnconfig)"
        ;;
        Darwin )
            CRYPT_DEV_OS="macosx"
            CRYPT_DEV_BIN_FILE=""
        ;;
        * )
            crypt_dev_error_exit "Current OS does not supported"
        ;;
    esac
}

# Execute
crypt_dev_exec()
{
    crypt_dev_action_check
    crypt_dev_device_check
    crypt_dev_define_os_bin

    ${CRYPT_DEV_OS}_${CRYPT_DEV_ACTION}
}








################        GNU/Linux -- LUKS (cryptsetup)








# 
linux_cryptsetup_check()
{
    if [ -z "$CRYPT_DEV_BIN_FILE" ]
    then
        crypt_dev_error_exit "Please, install 'cryptsetup' and/or execute as root"
    fi
}

# 
linux_luks_close_in()
{
    if [ -e "$CRYPT_DEV_MAPPER_IN" ]
    then
        "$CRYPT_DEV_BIN_FILE" luksClose "$CRYPT_DEV_MAPPER_IN"
        CRYPT_DEV_EXIT_STATUS="$?"
        if [ $CRYPT_DEV_EXIT_STATUS -eq 0 ]
        then
            crypt_dev_message "'${CRYPT_DEV_MAPPER_IN}' has been closed"

            rm -rf "$CRYPT_DEV_MOUNT_DIR"
            if [ "$CRYPT_DEV_ACTION" = "$CRYPT_DEV_ACTION_DEFAULT" ]
            then
                exit 0
            fi
        else
            crypt_dev_error_exit "'${CRYPT_DEV_MAPPER_IN}' has been not closed"
        fi
    else
        crypt_dev_warning "'${CRYPT_DEV_MAPPER_IN}' does not exists"
    fi
}

# 
linux_luks_close()
{
    if [ -e "$CRYPT_DEV_MAPPER" ]
    then
        "$CRYPT_DEV_BIN_FILE" luksClose "$CRYPT_DEV_MAPPER"
        CRYPT_DEV_EXIT_STATUS="$?"
        if [ $CRYPT_DEV_EXIT_STATUS -eq 0 ]
        then
            crypt_dev_message "'${CRYPT_DEV_MAPPER}' has been closed"

            rm -rf "$CRYPT_DEV_MOUNT_DIR"
            exit 0
        else
            crypt_dev_error_exit "'${CRYPT_DEV_MAPPER}' has been not closed"
        fi
    else
        crypt_dev_warning "'${CRYPT_DEV_MAPPER}' does not exists"
        exit 0
    fi
}




########    GNU/Linux -- LUKS -- Mount




# 
linux_luks_open()
{
    "$CRYPT_DEV_BIN_FILE" luksOpen "$CRYPT_DEV_SYSTEM" "$CRYPT_DEV_NAME"
    CRYPT_DEV_EXIT_STATUS="$?"
    if [ $CRYPT_DEV_EXIT_STATUS -eq 0 ]
    then
        crypt_dev_message "'${CRYPT_DEV_NAME}' has been opened"
    else
        crypt_dev_error_exit "'${CRYPT_DEV_NAME}' has been not opened"
    fi
}

# 
linux_luks_open_in()
{
    "$CRYPT_DEV_BIN_FILE" luksOpen "$CRYPT_DEV_MAPPER" "$CRYPT_DEV_NAME_IN"
    CRYPT_DEV_EXIT_STATUS="$?"
    if [ $CRYPT_DEV_EXIT_STATUS -eq 0 ]
    then
        crypt_dev_message "'${CRYPT_DEV_NAME_IN}' has been opened"
    else
        crypt_dev_error_exit "'${CRYPT_DEV_NAME_IN}' has been not opened"
    fi
}

# 
linux_mapper_mount()
{
    mkdir -p "$CRYPT_DEV_MOUNT_DIR" && mount "$CRYPT_DEV_MAPPER_IN" "$CRYPT_DEV_MOUNT_DIR"
    CRYPT_DEV_EXIT_STATUS="$?"
    if [ $CRYPT_DEV_EXIT_STATUS -eq 0 ]
    then
        crypt_dev_message "'${CRYPT_DEV_SYSTEM}' has been mounted to '${CRYPT_DEV_MOUNT_DIR}'"
    else
        crypt_dev_error "Something wrong"

        linux_luks_close_in
        linux_luks_close
    fi

    exit $CRYPT_DEV_EXIT_STATUS
}

# 
linux_luks_mount()
{
    if [ -e "$CRYPT_DEV_SYSTEM" ]
    then
        if [ ! -e "$CRYPT_DEV_MOUNT_DIR" ]
        then
            linux_luks_open && linux_luks_open_in
            linux_mapper_mount
        else
            crypt_dev_error_exit "'${CRYPT_DEV_MOUNT_DIR}' already exists"
        fi
    else
        crypt_dev_error_exit "'${CRYPT_DEV_SYSTEM}' does not exist"
    fi
}

# 
linux_mount()
{
    linux_cryptsetup_check
    linux_luks_mount
}




########    GNU/Linux -- LUKS -- Umount




# 
linux_luks_mapper_umount()
{
    local crypt_dev_mapper_pids=""

    for i in $(lsof -Fp "$CRYPT_DEV_MOUNT_DIR" 2>/dev/null)
    do
        crypt_dev_mapper_pids="$crypt_dev_mapper_pids ${i/p/}"
    done

    if [ -z "$crypt_dev_mapper_pids" ]
    then
        umount -l "$CRYPT_DEV_MOUNT_DIR"

        crypt_dev_warning "'${CRYPT_DEV_MOUNT_DIR}' has been unmounted lazily"
    else
        crypt_dev_warning "Killing proccesses${crypt_dev_mapper_pids} for '$CRYPT_DEV_MOUNT_DIR'"

        kill -9 $crypt_dev_mapper_pids
        linux_luks_umount
    fi
}

# 
linux_luks_umount()
{
    if [ -e "$CRYPT_DEV_MOUNT_DIR" ]
    then
        umount "$CRYPT_DEV_MOUNT_DIR"
        CURRENT_EXIT_STATUS="$?"
        if [ $CURRENT_EXIT_STATUS -eq 0 ]
        then
            crypt_dev_message "'${CRYPT_DEV_MOUNT_DIR}' has been unmounted"

            rm -rf "$CRYPT_DEV_MOUNT_DIR"
        else
            crypt_dev_error "'${CRYPT_DEV_MOUNT_DIR}' has been not unmounted correctly"

            linux_luks_mapper_umount
        fi
    else
        crypt_dev_warning "'${CRYPT_DEV_MOUNT_DIR}' does not exists"
    fi
}

# 
linux_umount()
{
    linux_cryptsetup_check
    linux_luks_umount
    linux_luks_close_in
    linux_luks_close
}








################        NetBSD -- CGD (cgd)








# 
netbsd_cgd_check()
{
    if [ -z "$CRYPT_DEV_BIN_FILE" ]
    then
        crypt_dev_error_exit "Please, install 'cgd' and/or execute as root"
    fi
}




########    NetBSD -- CGD -- Umount




# 
netbsd_mount()
{
    netbsd_cgd_check
}




########    NetBSD -- CGD -- Umount




# 
netbsd_umount()
{
    netbsd_cgd_check
}








################        FreeBSD -- GELI (geli)








# 
freebsd_geli_check()
{
    if [ -z "$CRYPT_DEV_BIN_FILE" ]
    then
        crypt_dev_error_exit "Please, install 'geli' and/or execute as root"
    fi
}




########    FreeBSD -- GELI -- Mount




# 
freebsd_mount()
{
    freebsd_geli_check
}




########    FreeBSD -- GELI -- Umount




# 
freebsd_umount()
{
    freebsd_geli_check
}








################        OpenBSD -- SVND (vnconfig)








# 
openbsd_svnd_check()
{
    if [ -z "$CRYPT_DEV_BIN_FILE" ]
    then
        crypt_dev_error_exit "Please, install 'vnconfig' and/or execute as root"
    fi
}




########    OpenBSD -- SVND -- Mount




# 
openbsd_mount()
{
    openbsd_svnd_check
}




########    OpenBSD -- SVND -- Umount




# 
openbsd_umount()
{
    openbsd_svnd_check
}








################        Mac OS X -- ? (?)








crypt_dev_exec
